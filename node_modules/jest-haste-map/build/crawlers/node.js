<<<<<<< HEAD
'use strict';var _fs;
=======
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';
>>>>>>> master




<<<<<<< HEAD







function _load_fs() {return _fs = _interopRequireDefault(require('fs'));}var _path;
function _load_path() {return _path = _interopRequireDefault(require('path'));}var _child_process;
function _load_child_process() {return _child_process = require('child_process');}var _constants;
function _load_constants() {return _constants = _interopRequireDefault(require('../constants'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                                                                                * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                                                                                                                                *
                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                *
                                                                                                                                                                                                * 
                                                                                                                                                                                                */function find(roots, extensions, ignore,
=======
const H = require('../constants');

const fs = require('fs');
const path = require('path');
const spawn = require('child_process').spawn;



function find(
roots,
extensions,
ignore,
>>>>>>> master
callback)
{
  const result = [];
  let activeCalls = 0;

  function search(directory) {
    activeCalls++;
<<<<<<< HEAD
    (_fs || _load_fs()).default.readdir(directory, (err, names) => {
      activeCalls--;

      names.forEach(file => {
        file = (_path || _load_path()).default.join(directory, file);
=======
    fs.readdir(directory, (err, names) => {
      activeCalls--;

      names.forEach(file => {
        file = path.join(directory, file);
>>>>>>> master
        if (ignore(file)) {
          return;
        }
        activeCalls++;

<<<<<<< HEAD
        (_fs || _load_fs()).default.lstat(file, (err, stat) => {
=======
        fs.lstat(file, (err, stat) => {
>>>>>>> master
          activeCalls--;

          if (!err && stat && !stat.isSymbolicLink()) {
            if (stat.isDirectory()) {
              search(file);
            } else {
<<<<<<< HEAD
              const ext = (_path || _load_path()).default.extname(file).substr(1);
=======
              const ext = path.extname(file).substr(1);
>>>>>>> master
              if (extensions.indexOf(ext) !== -1) {
                result.push([file, stat.mtime.getTime()]);
              }
            }
          }
          if (activeCalls === 0) {
            callback(result);
          }
        });
      });

      if (activeCalls === 0) {
        callback(result);
      }
    });
  }

<<<<<<< HEAD
  if (roots.length > 0) {
    roots.forEach(search);
  } else {
    callback(result);
  }
=======
  roots.forEach(search);
>>>>>>> master
}

function findNative(
roots,
extensions,
ignore,
callback)
{
  const args = [].concat(roots);
  args.push('-type', 'f');
  if (extensions.length) {
<<<<<<< HEAD
    args.push('(');
=======
    args.push('\(');
>>>>>>> master
  }
  extensions.forEach((ext, index) => {
    if (index) {
      args.push('-o');
    }
    args.push('-iname');
    args.push('*.' + ext);
  });
  if (extensions.length) {
<<<<<<< HEAD
    args.push(')');
  }

  const child = (0, (_child_process || _load_child_process()).spawn)('find', args);
=======
    args.push('\)');
  }

  const child = spawn('find', args);
>>>>>>> master
  let stdout = '';
  child.stdout.setEncoding('utf-8');
  child.stdout.on('data', data => stdout += data);

  child.stdout.on('close', () => {
<<<<<<< HEAD
    const lines = stdout.
    trim().
=======
    const lines = stdout.trim().
>>>>>>> master
    split('\n').
    filter(x => !ignore(x));
    const result = [];
    let count = lines.length;
    if (!count) {
      callback([]);
    } else {
      lines.forEach(path => {
<<<<<<< HEAD
        (_fs || _load_fs()).default.stat(path, (err, stat) => {
=======
        fs.stat(path, (err, stat) => {
>>>>>>> master
          if (!err && stat) {
            result.push([path, stat.mtime.getTime()]);
          }
          if (--count === 0) {
            callback(result);
          }
        });
      });
    }
  });
}

module.exports = function nodeCrawl(
options)
{const
<<<<<<< HEAD
  data = options.data,extensions = options.extensions,forceNodeFilesystemAPI = options.forceNodeFilesystemAPI,ignore = options.ignore,roots = options.roots;
=======

  data =




  options.data,extensions = options.extensions,forceNodeFilesystemAPI = options.forceNodeFilesystemAPI,ignore = options.ignore,roots = options.roots;
>>>>>>> master

  return new Promise(resolve => {
    const callback = list => {
      const files = Object.create(null);
      list.forEach(fileData => {
        const name = fileData[0];
        const mtime = fileData[1];
        const existingFile = data.files[name];
<<<<<<< HEAD
        if (existingFile && existingFile[(_constants || _load_constants()).default.MTIME] === mtime) {
=======
        if (existingFile && existingFile[H.MTIME] === mtime) {
>>>>>>> master
          files[name] = existingFile;
        } else {
          // See ../constants.js
          files[name] = ['', mtime, 0, []];
        }
      });
      data.files = files;
      resolve(data);
    };

    if (forceNodeFilesystemAPI || process.platform === 'win32') {
      find(roots, extensions, ignore, callback);
    } else {
      findNative(roots, extensions, ignore, callback);
    }
  });
};