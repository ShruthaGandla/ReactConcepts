<<<<<<< HEAD
'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _path;





=======
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';



const path = require('path');
const childProcess = require('child_process');

const env = Object.assign({}, process.env, {
  HGPLAIN: 1 });
>>>>>>> master






<<<<<<< HEAD
function _load_path() {return _path = _interopRequireDefault(require('path'));}var _child_process;
function _load_child_process() {return _child_process = _interopRequireDefault(require('child_process'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};} /**
opyright (c) 2014-present, Facebook, Inc. All rights reserved.

his source code is licensed under the MIT license found in the
file in the root directory of this source tree.


const env = Object.assign({}, process.env, { HGPLAIN: 1 });const adapter = { findChangedFiles: (() => {var _ref = _asyncToGenerator(function* (
    cwd,
    options)
    {
      return new Promise(function (resolve, reject) {
        let args = ['status', '-amnu'];
        if (options && options.withAncestor) {
          args.push('--rev', 'ancestor(.^)');
        } else if (options && options.lastCommit === true) {
          args = ['tip', '--template', '{files%"{file}\n"}'];
        }
        const child = (_child_process || _load_child_process()).default.spawn('hg', args, { cwd, env });
        let stdout = '';
        let stderr = '';
        child.stdout.on('data', function (data) {return stdout += data;});
        child.stderr.on('data', function (data) {return stderr += data;});
        child.on('error', function (error) {return reject(error);});
        child.on('close', function (code) {
          if (code === 0) {
            stdout = stdout.trim();
            if (stdout === '') {
              resolve([]);
            } else {
              resolve(
              stdout.
              split('\n').
              map(function (changedPath) {return (_path || _load_path()).default.resolve(cwd, changedPath);}));

            }
          } else {
            reject(new Error(code + ': ' + stderr));
          }
        });
      });
    });return function findChangedFiles(_x, _x2) {return _ref.apply(this, arguments);};})(),

  getRoot: (() => {var _ref2 = _asyncToGenerator(function* (cwd) {
      return new Promise(function (resolve) {
        try {
          let stdout = '';
          const child = (_child_process || _load_child_process()).default.spawn('hg', ['root'], { cwd, env });
          child.stdout.on('data', function (data) {return stdout += data;});
          child.on('error', function () {return resolve(null);});
          child.on('close', function (code) {return resolve(code === 0 ? stdout.trim() : null);});
        } catch (e) {
          resolve(null);
        }
      });
    });return function getRoot(_x3) {return _ref2.apply(this, arguments);};})() };exports.default =


adapter;
=======

function findChangedFiles(cwd, options) {
  return new Promise((resolve, reject) => {
    let args = ['status', '-amn'];
    if (options && options.withAncestor) {
      args.push('--rev', 'ancestor(.^)');
    } else if (options && options.lastCommit === true) {
      args = ['tip', '--template', '{files%"{file}\n"}'];
    }
    const child = childProcess.spawn('hg', args, { cwd, env });
    let stdout = '';
    let stderr = '';
    child.stdout.on('data', data => stdout += data);
    child.stderr.on('data', data => stderr += data);
    child.on('error', e => reject(e));
    child.on('close', code => {
      if (code === 0) {
        stdout = stdout.trim();
        if (stdout === '') {
          resolve([]);
        } else {
          resolve(stdout.split('\n').map(
          changedPath => path.resolve(cwd, changedPath)));

        }
      } else {
        reject(code + ': ' + stderr);
      }
    });
  });
}

function isHGRepository(cwd) {
  return new Promise(resolve => {
    try {
      let stdout = '';
      const child = childProcess.spawn('hg', ['root'], { cwd, env });
      child.stdout.on('data', data => stdout += data);
      child.on('error', () => resolve(null));
      child.on('close', code => resolve(code === 0 ? stdout.trim() : null));
    } catch (e) {
      resolve(null);
    }
  });
}

module.exports = {
  findChangedFiles,
  isHGRepository };
>>>>>>> master
