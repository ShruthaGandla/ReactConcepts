<<<<<<< HEAD
'use strict';var _crypto;

=======
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';
>>>>>>> master




<<<<<<< HEAD






function _load_crypto() {return _crypto = _interopRequireDefault(require('crypto'));}var _fs;
function _load_fs() {return _fs = _interopRequireDefault(require('fs'));}var _path;
function _load_path() {return _path = _interopRequireDefault(require('path'));}var _babelPresetJest;
function _load_babelPresetJest() {return _babelPresetJest = _interopRequireDefault(require('babel-preset-jest'));}var _babelCore;
function _load_babelCore() {return _babelCore = require('babel-core');}var _babelPluginIstanbul;
function _load_babelPluginIstanbul() {return _babelPluginIstanbul = _interopRequireDefault(require('babel-plugin-istanbul'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                                                                                                             * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                                                                                                                                                             *
                                                                                                                                                                                                                             * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                             * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                             *
                                                                                                                                                                                                                             * 
                                                                                                                                                                                                                             */const BABELRC_FILENAME = '.babelrc';const BABELRC_JS_FILENAME = '.babelrc.js';const BABEL_CONFIG_KEY = 'babel';const PACKAGE_JSON = 'package.json';const THIS_FILE = (_fs || _load_fs()).default.readFileSync(__filename);
const createTransformer = options => {
  const cache = Object.create(null);

  const getBabelRC = filename => {
    const paths = [];
    let directory = filename;
    while (directory !== (directory = (_path || _load_path()).default.dirname(directory))) {
      if (cache[directory]) {
        break;
      }

      paths.push(directory);
      const configFilePath = (_path || _load_path()).default.join(directory, BABELRC_FILENAME);
      if ((_fs || _load_fs()).default.existsSync(configFilePath)) {
        cache[directory] = (_fs || _load_fs()).default.readFileSync(configFilePath, 'utf8');
        break;
      }
      const configJsFilePath = (_path || _load_path()).default.join(directory, BABELRC_JS_FILENAME);
      if ((_fs || _load_fs()).default.existsSync(configJsFilePath)) {
        // $FlowFixMe
        cache[directory] = JSON.stringify(require(configJsFilePath));
        break;
      }
      const resolvedJsonFilePath = (_path || _load_path()).default.join(directory, PACKAGE_JSON);
      const packageJsonFilePath =
      resolvedJsonFilePath === PACKAGE_JSON ?
      (_path || _load_path()).default.resolve(directory, PACKAGE_JSON) :
      resolvedJsonFilePath;
      if ((_fs || _load_fs()).default.existsSync(packageJsonFilePath)) {
        // $FlowFixMe
        const packageJsonFileContents = require(packageJsonFilePath);
        if (packageJsonFileContents[BABEL_CONFIG_KEY]) {
          cache[directory] = JSON.stringify(
          packageJsonFileContents[BABEL_CONFIG_KEY]);

          break;
        }
      }
    }
    paths.forEach(directoryPath => cache[directoryPath] = cache[directory]);
    return cache[directory] || '';
  };

  options = Object.assign({}, options, {
    plugins: options && options.plugins || [],
    presets: (options && options.presets || []).concat([(_babelPresetJest || _load_babelPresetJest()).default]),
    retainLines: true,
    sourceMaps: 'inline' });
=======
const crypto = require('crypto');
const fs = require('fs');
const jestPreset = require('babel-preset-jest');
const path = require('path');

const BABELRC_FILENAME = '.babelrc';
const THIS_FILE = fs.readFileSync(__filename);

const cache = Object.create(null);

let babel;

const getBabelRC = (filename, _ref) => {let useCache = _ref.useCache;
  const paths = [];
  let directory = filename;
  while (directory !== (directory = path.dirname(directory))) {
    if (useCache && cache[directory]) {
      break;
    }

    paths.push(directory);
    const configFilePath = path.join(directory, BABELRC_FILENAME);
    if (fs.existsSync(configFilePath)) {
      cache[directory] = fs.readFileSync(configFilePath, 'utf8');
      break;
    }
  }
  paths.forEach(directoryPath => {
    cache[directoryPath] = cache[directory];
  });

  return cache[directory] || '';
};

const createTransformer = options => {
  options = Object.assign({}, options, {
    plugins: options && options.plugins || [],
    presets: (options && options.presets || []).concat([jestPreset]),
    retainLines: true });
>>>>>>> master

  delete options.cacheDirectory;
  delete options.filename;

  return {
    canInstrument: true,
    getCacheKey(
    fileData,
    filename,
<<<<<<< HEAD
    configString, _ref)

    {let instrument = _ref.instrument,rootDir = _ref.rootDir;
      return (_crypto || _load_crypto()).default.
      createHash('md5').
=======
    configString, _ref2)

    {let instrument = _ref2.instrument,watch = _ref2.watch;
      return crypto.createHash('md5').
>>>>>>> master
      update(THIS_FILE).
      update('\0', 'utf8').
      update(fileData).
      update('\0', 'utf8').
<<<<<<< HEAD
      update((_path || _load_path()).default.relative(rootDir, filename)).
      update('\0', 'utf8').
      update(configString).
      update('\0', 'utf8').
      update(getBabelRC(filename)).
=======
      update(configString).
      update('\0', 'utf8')
      // Don't use the in-memory cache in watch mode because the .babelrc
      // file may be modified.
      .update(getBabelRC(filename, { useCache: !watch })).
>>>>>>> master
      update('\0', 'utf8').
      update(instrument ? 'instrument' : '').
      digest('hex');
    },
    process(
    src,
    filename,
    config,
    transformOptions)
    {
<<<<<<< HEAD
      const altExts = config.moduleFileExtensions.map(
      extension => '.' + extension);

      if ((_babelCore || _load_babelCore()).util && !(_babelCore || _load_babelCore()).util.canCompile(filename, altExts)) {
=======
      if (!babel) {
        babel = require('babel-core');
      }

      if (!babel.util.canCompile(filename)) {
>>>>>>> master
        return src;
      }

      const theseOptions = Object.assign({ filename }, options);
<<<<<<< HEAD
=======

>>>>>>> master
      if (transformOptions && transformOptions.instrument) {
        theseOptions.auxiliaryCommentBefore = ' istanbul ignore next ';
        // Copied from jest-runtime transform.js
        theseOptions.plugins = theseOptions.plugins.concat([
<<<<<<< HEAD
        [(_babelPluginIstanbul || _load_babelPluginIstanbul()).default,

=======
        [
        require('babel-plugin-istanbul').default,
>>>>>>> master
        {
          // files outside `cwd` will not be instrumented
          cwd: config.rootDir,
          exclude: [] }]]);



      }

<<<<<<< HEAD
      // babel v7 might return null in the case when the file has been ignored.
      const transformResult = (0, (_babelCore || _load_babelCore()).transform)(src, theseOptions);
      return transformResult ? transformResult.code : src;
=======
      return babel.transform(src, theseOptions).code;
>>>>>>> master
    } };

};

module.exports = createTransformer();
module.exports.createTransformer = createTransformer;