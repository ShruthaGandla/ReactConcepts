<<<<<<< HEAD
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.isJSONString = exports.getTestEnvironment = exports._replaceRootDirTags = exports._replaceRootDirInPath = exports.escapeGlobCharacters = exports.resolve = exports.DOCUMENTATION_NOTE = exports.BULLET = undefined;var _path;










function _load_path() {return _path = _interopRequireDefault(require('path'));}var _jestValidate;
function _load_jestValidate() {return _jestValidate = require('jest-validate');}var _jestResolve;
function _load_jestResolve() {return _jestResolve = _interopRequireDefault(require('jest-resolve'));}var _chalk;
function _load_chalk() {return _chalk = _interopRequireDefault(require('chalk'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
const BULLET = exports.BULLET = (_chalk || _load_chalk()).default.bold('\u25cf '); /**
                                                                                    * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                    *
                                                                                    * This source code is licensed under the MIT license found in the
                                                                                    * LICENSE file in the root directory of this source tree.
                                                                                    *
                                                                                    * 
                                                                                    */const DOCUMENTATION_NOTE = exports.DOCUMENTATION_NOTE = `  ${(_chalk || _load_chalk()).default.bold('Configuration Documentation:')}
  https://facebook.github.io/jest/docs/configuration.html
`;const createValidationError = message => {return new (_jestValidate || _load_jestValidate()).ValidationError(`${BULLET}Validation Error`,
=======
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';var _require =



require('jest-validate');const ValidationError = _require.ValidationError;
const Resolver = require('jest-resolve');
const path = require('path');
const chalk = require('chalk');
const BULLET = chalk.bold('\u25cf ');
const DOCUMENTATION_NOTE =
`  ${chalk.bold('Configuration Documentation:')}
  https://facebook.github.io/jest/docs/configuration.html
`;

const createValidationError = message => {
  return new ValidationError(
  `${BULLET}Validation Error`,
>>>>>>> master
  message,
  DOCUMENTATION_NOTE);

};

<<<<<<< HEAD
const resolve = exports.resolve = (rootDir, key, filePath) => {
  const module = (_jestResolve || _load_jestResolve()).default.findNodeModule(
=======
const resolve = (rootDir, key, filePath) => {
  const module = Resolver.findNodeModule(
>>>>>>> master
  _replaceRootDirInPath(rootDir, filePath),
  {
    basedir: rootDir });



  if (!module) {
<<<<<<< HEAD
    throw createValidationError(
    `  Module ${(_chalk || _load_chalk()).default.bold(filePath)} in the ${(_chalk || _load_chalk()).default.bold(
    key)
    } option was not found.`);

=======
    /* eslint-disable max-len */
    throw createValidationError(
    `  Module ${chalk.bold(filePath)} in the ${chalk.bold(key)} option was not found.`);

    /* eslint-disable max-len */
>>>>>>> master
  }

  return module;
};

<<<<<<< HEAD
const escapeGlobCharacters = exports.escapeGlobCharacters = path => {
  return path.replace(/([()*{}\[\]!?\\])/g, '\\$1');
};

const _replaceRootDirInPath = exports._replaceRootDirInPath = (
rootDir,
filePath) =>
{
=======
const _replaceRootDirInPath = (rootDir, filePath) => {
>>>>>>> master
  if (!/^<rootDir>/.test(filePath)) {
    return filePath;
  }

<<<<<<< HEAD
  return (_path || _load_path()).default.resolve(
  rootDir,
  (_path || _load_path()).default.normalize('./' + filePath.substr('<rootDir>'.length)));

};

const _replaceRootDirInObject = (rootDir, config) => {
  if (config !== null) {
    const newConfig = {};
    for (const configKey in config) {
      newConfig[configKey] =
      configKey === 'rootDir' ?
      config[configKey] :
      _replaceRootDirTags(rootDir, config[configKey]);
    }
    return newConfig;
  }
  return config;
};

const _replaceRootDirTags = exports._replaceRootDirTags = (rootDir, config) => {
  switch (typeof config) {
    case 'object':
      if (Array.isArray(config)) {
        return config.map(item => _replaceRootDirTags(rootDir, item));
      }
      if (config instanceof RegExp) {
        return config;
      }
      return _replaceRootDirInObject(rootDir, config);
=======
  return path.resolve(
  rootDir,
  path.normalize('./' + filePath.substr('<rootDir>'.length)));

};

const _replaceRootDirTags = (rootDir, config) => {
  switch (typeof config) {
    case 'object':
      if (config instanceof RegExp) {
        return config;
      }

      if (Array.isArray(config)) {
        return config.map(item => _replaceRootDirTags(rootDir, item));
      }

      if (config !== null) {
        const newConfig = {};
        for (const configKey in config) {
          newConfig[configKey] = configKey === 'rootDir' ?
          config[configKey] :
          _replaceRootDirTags(rootDir, config[configKey]);
        }
        return newConfig;
      }
      break;
>>>>>>> master
    case 'string':
      return _replaceRootDirInPath(rootDir, config);}

  return config;
};

/**
    * Finds the test environment to use:
    *
    * 1. looks for jest-environment-<name> relative to project.
    * 1. looks for jest-environment-<name> relative to Jest.
    * 1. looks for <name> relative to project.
    * 1. looks for <name> relative to Jest.
    */
<<<<<<< HEAD
const getTestEnvironment = exports.getTestEnvironment = config => {
  const env = _replaceRootDirInPath(config.rootDir, config.testEnvironment);
  let module = (_jestResolve || _load_jestResolve()).default.findNodeModule(`jest-environment-${env}`, {
=======
const getTestEnvironment = config => {
  const env = config.testEnvironment;
  let module = Resolver.findNodeModule(`jest-environment-${env}`, {
>>>>>>> master
    basedir: config.rootDir });

  if (module) {
    return module;
  }

  try {
    return require.resolve(`jest-environment-${env}`);
  } catch (e) {}

<<<<<<< HEAD
  module = (_jestResolve || _load_jestResolve()).default.findNodeModule(env, { basedir: config.rootDir });
=======
  module = Resolver.findNodeModule(env, { basedir: config.rootDir });
>>>>>>> master
  if (module) {
    return module;
  }

  try {
    return require.resolve(env);
  } catch (e) {}

<<<<<<< HEAD
  throw createValidationError(
  `  Test environment ${(_chalk || _load_chalk()).default.bold(
  env)
  } cannot be found. Make sure the ${(_chalk || _load_chalk()).default.bold(
  'testEnvironment')
  } configuration option points to an existing node module.`);

};

const isJSONString = exports.isJSONString = text =>
text &&
typeof text === 'string' &&
text.startsWith('{') &&
text.endsWith('}');
=======
  /* eslint-disable max-len */
  throw createValidationError(
  `  Test environment ${chalk.bold(env)} cannot be found. Make sure the ${chalk.bold('testEnvironment')} configuration option points to an existing node module.`);

  /* eslint-disable max-len */
};

module.exports = {
  BULLET,
  DOCUMENTATION_NOTE,
  _replaceRootDirInPath,
  _replaceRootDirTags,
  getTestEnvironment,
  resolve };
>>>>>>> master
