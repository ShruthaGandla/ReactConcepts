<<<<<<< HEAD
'use strict';










var _prettyFormat = require('pretty-format');var _prettyFormat2 = _interopRequireDefault(_prettyFormat);
var _chalk = require('chalk');var _chalk2 = _interopRequireDefault(_chalk);
var _jestGetType = require('jest-get-type');var _jestGetType2 = _interopRequireDefault(_jestGetType);
var _diff_strings = require('./diff_strings');var _diff_strings2 = _interopRequireDefault(_diff_strings);
var _constants = require('./constants');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                       * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                                                                       *
                                                                                                                                       * This source code is licensed under the MIT license found in the
                                                                                                                                       * LICENSE file in the root directory of this source tree.
                                                                                                                                       *
                                                                                                                                       * 
                                                                                                                                       */var _prettyFormat$plugins =

_prettyFormat2.default.plugins;const AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,DOMCollection = _prettyFormat$plugins.DOMCollection,DOMElement = _prettyFormat$plugins.DOMElement,Immutable = _prettyFormat$plugins.Immutable,ReactElement = _prettyFormat$plugins.ReactElement,ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;

const PLUGINS = [
ReactTestComponent,
ReactElement,
DOMElement,
DOMCollection,
Immutable,
AsymmetricMatcher];
=======
/**
 * Copyright (c) 2014, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';



const ReactElementPlugin = require('pretty-format/build/plugins/ReactElement');
const ReactTestComponentPlugin = require('pretty-format/build/plugins/ReactTestComponent');
const AsymmetricMatcherPlugin = require('pretty-format/build/plugins/AsymmetricMatcher');

const chalk = require('chalk');
const diffStrings = require('./diffStrings');var _require =
require('jest-matcher-utils');const getType = _require.getType;
const prettyFormat = require('pretty-format');var _require2 =




require('./constants');const NO_DIFF_MESSAGE = _require2.NO_DIFF_MESSAGE,SIMILAR_MESSAGE = _require2.SIMILAR_MESSAGE;

const PLUGINS = [
ReactTestComponentPlugin,
ReactElementPlugin,
AsymmetricMatcherPlugin];
>>>>>>> master

const FORMAT_OPTIONS = {
  plugins: PLUGINS };

<<<<<<< HEAD
const FORMAT_OPTIONS_0 = Object.assign({}, FORMAT_OPTIONS, {
  indent: 0 });

=======
>>>>>>> master
const FALLBACK_FORMAT_OPTIONS = {
  callToJSON: false,
  maxDepth: 10,
  plugins: PLUGINS };

<<<<<<< HEAD
const FALLBACK_FORMAT_OPTIONS_0 = Object.assign({}, FALLBACK_FORMAT_OPTIONS, {
  indent: 0 });


const MULTILINE_REGEXP = /[\r\n]/;
=======
>>>>>>> master

// Generate a string that will highlight the difference between two values
// with green and red. (similar to how github does code diffing)
function diff(a, b, options) {
  if (a === b) {
<<<<<<< HEAD
    return _constants.NO_DIFF_MESSAGE;
  }

  const aType = (0, _jestGetType2.default)(a);
=======
    return NO_DIFF_MESSAGE;
  }

  const aType = getType(a);
>>>>>>> master
  let expectedType = aType;
  let omitDifference = false;
  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {
    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {
      // Do not know expected type of user-defined asymmetric matcher.
      return null;
    }
    if (typeof a.getExpectedType !== 'function') {
      // For example, expect.anything() matches either null or undefined
      return null;
    }
    expectedType = a.getExpectedType();
    // Primitive types boolean and number omit difference below.
    // For example, omit difference for expect.stringMatching(regexp)
    omitDifference = expectedType === 'string';
  }

<<<<<<< HEAD
  if (expectedType !== (0, _jestGetType2.default)(b)) {
    return (
      '  Comparing two different types of values.' +
      ` Expected ${_chalk2.default.green(expectedType)} but ` +
      `received ${_chalk2.default.red((0, _jestGetType2.default)(b))}.`);
=======
  if (expectedType !== getType(b)) {
    return (
      '  Comparing two different types of values.' +
      ` Expected ${chalk.green(expectedType)} but ` +
      `received ${chalk.red(getType(b))}.`);
>>>>>>> master

  }

  if (omitDifference) {
    return null;
  }

  switch (aType) {
    case 'string':
<<<<<<< HEAD
      const multiline = MULTILINE_REGEXP.test(a) && b.indexOf('\n') !== -1;
      if (multiline) {
        return (0, _diff_strings2.default)(a, b, options);
=======
      const multiline = a.match(/[\r\n]/) !== -1 && b.indexOf('\n') !== -1;
      if (multiline) {
        return diffStrings(String(a), String(b), options);
>>>>>>> master
      }
      return null;
    case 'number':
    case 'boolean':
      return null;
    case 'map':
      return compareObjects(sortMap(a), sortMap(b), options);
    case 'set':
      return compareObjects(sortSet(a), sortSet(b), options);
    default:
      return compareObjects(a, b, options);}

}

function sortMap(map) {
  return new Map(Array.from(map.entries()).sort());
}

function sortSet(set) {
  return new Set(Array.from(set.values()).sort());
}

function compareObjects(a, b, options) {
  let diffMessage;
  let hasThrown = false;

  try {
<<<<<<< HEAD
    diffMessage = (0, _diff_strings2.default)(
    (0, _prettyFormat2.default)(a, FORMAT_OPTIONS_0),
    (0, _prettyFormat2.default)(b, FORMAT_OPTIONS_0),
    options,
    {
      a: (0, _prettyFormat2.default)(a, FORMAT_OPTIONS),
      b: (0, _prettyFormat2.default)(b, FORMAT_OPTIONS) });

=======
    diffMessage = diffStrings(
    prettyFormat(a, FORMAT_OPTIONS),
    prettyFormat(b, FORMAT_OPTIONS),
    options);
>>>>>>> master

  } catch (e) {
    hasThrown = true;
  }

  // If the comparison yields no results, compare again but this time
  // without calling `toJSON`. It's also possible that toJSON might throw.
<<<<<<< HEAD
  if (!diffMessage || diffMessage === _constants.NO_DIFF_MESSAGE) {
    diffMessage = (0, _diff_strings2.default)(
    (0, _prettyFormat2.default)(a, FALLBACK_FORMAT_OPTIONS_0),
    (0, _prettyFormat2.default)(b, FALLBACK_FORMAT_OPTIONS_0),
    options,
    {
      a: (0, _prettyFormat2.default)(a, FALLBACK_FORMAT_OPTIONS),
      b: (0, _prettyFormat2.default)(b, FALLBACK_FORMAT_OPTIONS) });


    if (diffMessage !== _constants.NO_DIFF_MESSAGE && !hasThrown) {
      diffMessage = _constants.SIMILAR_MESSAGE + '\n\n' + diffMessage;
=======
  if (!diffMessage || diffMessage === NO_DIFF_MESSAGE) {
    diffMessage = diffStrings(
    prettyFormat(a, FALLBACK_FORMAT_OPTIONS),
    prettyFormat(b, FALLBACK_FORMAT_OPTIONS),
    options);

    if (diffMessage !== NO_DIFF_MESSAGE && !hasThrown) {
      diffMessage = SIMILAR_MESSAGE + '\n\n' + diffMessage;
>>>>>>> master
    }
  }

  return diffMessage;
}

module.exports = diff;