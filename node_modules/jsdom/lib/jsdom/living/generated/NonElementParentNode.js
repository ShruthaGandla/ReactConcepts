"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");
<<<<<<< HEAD

=======
>>>>>>> master
const impl = utils.implSymbol;

function NonElementParentNode() {
  throw new TypeError("Illegal constructor");
}

<<<<<<< HEAD
Object.defineProperty(NonElementParentNode, "prototype", {
  value: NonElementParentNode.prototype,
  writable: false,
  enumerable: false,
  configurable: false
});
=======
>>>>>>> master

NonElementParentNode.prototype.getElementById = function getElementById(elementId) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
<<<<<<< HEAD

  if (arguments.length < 1) {
    throw new TypeError(
      "Failed to execute 'getElementById' on 'NonElementParentNode': " +
        "1 argument required, but only " +
        arguments.length +
        " present."
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["DOMString"](args[0], {
    context: "Failed to execute 'getElementById' on 'NonElementParentNode': parameter 1"
  });

  return utils.tryWrapperForImpl(this[impl].getElementById(...args));
};

Object.defineProperty(NonElementParentNode.prototype, Symbol.toStringTag, {
  value: "NonElementParentNode",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
=======
  if (arguments.length < 1) {
    throw new TypeError("Failed to execute 'getElementById' on 'NonElementParentNode': 1 argument required, but only " + arguments.length + " present.");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = utils.tryImplForWrapper(arguments[i]);
  }
  args[0] = conversions["DOMString"](args[0]);
  return utils.tryWrapperForImpl(this[impl].getElementById.apply(this[impl], args));
};

NonElementParentNode.prototype.toString = function () {
  if (this === NonElementParentNode.prototype) {
    return "[object NonElementParentNodePrototype]";
  }
  return this[impl].toString();
};

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
>>>>>>> master
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
<<<<<<< HEAD
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
=======
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
>>>>>>> master
          return true;
        }
      }
    }
    return false;
  },
<<<<<<< HEAD
  convert(obj, { context = "The provided value" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(`${context} is not of type 'NonElementParentNode'.`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(NonElementParentNode.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
=======
  create(constructorArgs, privateData) {
    let obj = Object.create(NonElementParentNode.prototype);
    this.setup(obj, constructorArgs, privateData);
>>>>>>> master
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(NonElementParentNode.prototype);
<<<<<<< HEAD
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: NonElementParentNode,
  expose: {}
}; // iface
=======
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: NonElementParentNode,
  expose: {
    
  }
};
>>>>>>> master
module.exports = iface;

const Impl = require("../nodes/NonElementParentNode-impl.js");
