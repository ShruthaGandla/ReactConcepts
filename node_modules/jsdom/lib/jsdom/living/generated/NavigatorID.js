"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");
<<<<<<< HEAD

=======
>>>>>>> master
const impl = utils.implSymbol;

function NavigatorID() {
  throw new TypeError("Illegal constructor");
}

<<<<<<< HEAD
Object.defineProperty(NavigatorID, "prototype", {
  value: NavigatorID.prototype,
  writable: false,
  enumerable: false,
  configurable: false
});

Object.defineProperty(NavigatorID.prototype, "appCodeName", {
  get() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["appCodeName"];
  },

=======

NavigatorID.prototype.toString = function () {
  if (this === NavigatorID.prototype) {
    return "[object NavigatorIDPrototype]";
  }
  return this[impl].toString();
};
Object.defineProperty(NavigatorID.prototype, "appCodeName", {
  get() {
    return this[impl].appCodeName;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "appName", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["appName"];
  },

=======
    return this[impl].appName;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "appVersion", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["appVersion"];
  },

=======
    return this[impl].appVersion;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "platform", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["platform"];
  },

=======
    return this[impl].platform;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "product", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["product"];
  },

=======
    return this[impl].product;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "productSub", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["productSub"];
  },

=======
    return this[impl].productSub;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "userAgent", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["userAgent"];
  },

=======
    return this[impl].userAgent;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "vendor", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["vendor"];
  },

=======
    return this[impl].vendor;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(NavigatorID.prototype, "vendorSub", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return this[impl]["vendorSub"];
  },

=======
    return this[impl].vendorSub;
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

<<<<<<< HEAD
Object.defineProperty(NavigatorID.prototype, Symbol.toStringTag, {
  value: "NavigatorID",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
=======

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
>>>>>>> master
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
<<<<<<< HEAD
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
=======
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
>>>>>>> master
          return true;
        }
      }
    }
    return false;
  },
<<<<<<< HEAD
  convert(obj, { context = "The provided value" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(`${context} is not of type 'NavigatorID'.`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(NavigatorID.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
=======
  create(constructorArgs, privateData) {
    let obj = Object.create(NavigatorID.prototype);
    this.setup(obj, constructorArgs, privateData);
>>>>>>> master
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(NavigatorID.prototype);
<<<<<<< HEAD
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: NavigatorID,
  expose: {}
}; // iface
=======
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: NavigatorID,
  expose: {
    
  }
};
>>>>>>> master
module.exports = iface;

const Impl = require("../navigator/NavigatorID-impl.js");
