"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");
<<<<<<< HEAD

=======
>>>>>>> master
const impl = utils.implSymbol;

function GlobalEventHandlers() {
  throw new TypeError("Illegal constructor");
}

<<<<<<< HEAD
Object.defineProperty(GlobalEventHandlers, "prototype", {
  value: GlobalEventHandlers.prototype,
  writable: false,
  enumerable: false,
  configurable: false
});

Object.defineProperty(GlobalEventHandlers.prototype, "onabort", {
  get() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onabort"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onabort"] = V;
  },

=======

GlobalEventHandlers.prototype.toString = function () {
  if (this === GlobalEventHandlers.prototype) {
    return "[object GlobalEventHandlersPrototype]";
  }
  return this[impl].toString();
};
Object.defineProperty(GlobalEventHandlers.prototype, "onabort", {
  get() {
    return utils.tryWrapperForImpl(this[impl].onabort);
  },
  set(V) {
    this[impl].onabort = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

<<<<<<< HEAD
Object.defineProperty(GlobalEventHandlers.prototype, "onauxclick", {
  get() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onauxclick"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onauxclick"] = V;
  },

=======
Object.defineProperty(GlobalEventHandlers.prototype, "onautocomplete", {
  get() {
    return utils.tryWrapperForImpl(this[impl].onautocomplete);
  },
  set(V) {
    this[impl].onautocomplete = utils.tryImplForWrapper(V);
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onautocompleteerror", {
  get() {
    return utils.tryWrapperForImpl(this[impl].onautocompleteerror);
  },
  set(V) {
    this[impl].onautocompleteerror = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onblur", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onblur"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onblur"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onblur);
  },
  set(V) {
    this[impl].onblur = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oncancel", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oncancel"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oncancel"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oncancel);
  },
  set(V) {
    this[impl].oncancel = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oncanplay", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oncanplay"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oncanplay"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oncanplay);
  },
  set(V) {
    this[impl].oncanplay = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oncanplaythrough", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oncanplaythrough"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oncanplaythrough"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oncanplaythrough);
  },
  set(V) {
    this[impl].oncanplaythrough = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onchange", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onchange"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onchange"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onchange);
  },
  set(V) {
    this[impl].onchange = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onclick", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onclick"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onclick"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onclick);
  },
  set(V) {
    this[impl].onclick = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onclose", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onclose"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onclose"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onclose);
  },
  set(V) {
    this[impl].onclose = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oncontextmenu", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oncontextmenu"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oncontextmenu"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oncontextmenu);
  },
  set(V) {
    this[impl].oncontextmenu = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oncuechange", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oncuechange"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oncuechange"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oncuechange);
  },
  set(V) {
    this[impl].oncuechange = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondblclick", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondblclick"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondblclick"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondblclick);
  },
  set(V) {
    this[impl].ondblclick = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondrag", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondrag"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondrag"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondrag);
  },
  set(V) {
    this[impl].ondrag = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondragend", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondragend"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondragend"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondragend);
  },
  set(V) {
    this[impl].ondragend = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondragenter", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondragenter"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondragenter"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondragenter);
  },
  set(V) {
    this[impl].ondragenter = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondragexit", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondragexit"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondragexit"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondragexit);
  },
  set(V) {
    this[impl].ondragexit = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondragleave", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondragleave"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondragleave"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondragleave);
  },
  set(V) {
    this[impl].ondragleave = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondragover", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondragover"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondragover"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondragover);
  },
  set(V) {
    this[impl].ondragover = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondragstart", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondragstart"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondragstart"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondragstart);
  },
  set(V) {
    this[impl].ondragstart = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondrop", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondrop"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondrop"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondrop);
  },
  set(V) {
    this[impl].ondrop = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ondurationchange", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ondurationchange"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ondurationchange"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ondurationchange);
  },
  set(V) {
    this[impl].ondurationchange = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onemptied", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onemptied"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onemptied"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onemptied);
  },
  set(V) {
    this[impl].onemptied = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onended", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onended"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onended"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onended);
  },
  set(V) {
    this[impl].onended = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onerror", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onerror"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onerror"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onerror);
  },
  set(V) {
    this[impl].onerror = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onfocus", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onfocus"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onfocus"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onfocus);
  },
  set(V) {
    this[impl].onfocus = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oninput", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oninput"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oninput"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oninput);
  },
  set(V) {
    this[impl].oninput = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "oninvalid", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["oninvalid"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["oninvalid"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].oninvalid);
  },
  set(V) {
    this[impl].oninvalid = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onkeydown", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onkeydown"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onkeydown"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onkeydown);
  },
  set(V) {
    this[impl].onkeydown = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onkeypress", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onkeypress"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onkeypress"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onkeypress);
  },
  set(V) {
    this[impl].onkeypress = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onkeyup", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onkeyup"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onkeyup"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onkeyup);
  },
  set(V) {
    this[impl].onkeyup = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onload", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onload"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onload"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onload);
  },
  set(V) {
    this[impl].onload = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onloadeddata", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onloadeddata"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onloadeddata"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onloadeddata);
  },
  set(V) {
    this[impl].onloadeddata = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onloadedmetadata", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onloadedmetadata"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onloadedmetadata"] = V;
  },

  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onloadend", {
  get() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onloadend"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onloadend"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onloadedmetadata);
  },
  set(V) {
    this[impl].onloadedmetadata = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onloadstart", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onloadstart"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onloadstart"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onloadstart);
  },
  set(V) {
    this[impl].onloadstart = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmousedown", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onmousedown"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onmousedown"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmousedown);
  },
  set(V) {
    this[impl].onmousedown = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmouseenter", {
  get() {
<<<<<<< HEAD
    return utils.tryWrapperForImpl(this[impl]["onmouseenter"]);
  },

  set(V) {
    V = utils.tryImplForWrapper(V);

    this[impl]["onmouseenter"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmouseenter);
  },
  set(V) {
    this[impl].onmouseenter = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmouseleave", {
  get() {
<<<<<<< HEAD
    return utils.tryWrapperForImpl(this[impl]["onmouseleave"]);
  },

  set(V) {
    V = utils.tryImplForWrapper(V);

    this[impl]["onmouseleave"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmouseleave);
  },
  set(V) {
    this[impl].onmouseleave = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmousemove", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onmousemove"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onmousemove"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmousemove);
  },
  set(V) {
    this[impl].onmousemove = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmouseout", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onmouseout"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onmouseout"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmouseout);
  },
  set(V) {
    this[impl].onmouseout = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmouseover", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onmouseover"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onmouseover"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmouseover);
  },
  set(V) {
    this[impl].onmouseover = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onmouseup", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onmouseup"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onmouseup"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onmouseup);
  },
  set(V) {
    this[impl].onmouseup = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onwheel", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onwheel"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onwheel"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onwheel);
  },
  set(V) {
    this[impl].onwheel = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onpause", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onpause"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onpause"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onpause);
  },
  set(V) {
    this[impl].onpause = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onplay", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onplay"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onplay"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onplay);
  },
  set(V) {
    this[impl].onplay = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onplaying", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onplaying"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onplaying"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onplaying);
  },
  set(V) {
    this[impl].onplaying = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onprogress", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onprogress"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onprogress"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onprogress);
  },
  set(V) {
    this[impl].onprogress = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onratechange", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onratechange"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onratechange"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onratechange);
  },
  set(V) {
    this[impl].onratechange = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onreset", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onreset"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onreset"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onreset);
  },
  set(V) {
    this[impl].onreset = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onresize", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onresize"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onresize"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onresize);
  },
  set(V) {
    this[impl].onresize = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onscroll", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onscroll"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onscroll"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onscroll);
  },
  set(V) {
    this[impl].onscroll = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onseeked", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onseeked"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onseeked"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onseeked);
  },
  set(V) {
    this[impl].onseeked = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onseeking", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onseeking"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onseeking"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onseeking);
  },
  set(V) {
    this[impl].onseeking = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onselect", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onselect"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onselect"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onselect);
  },
  set(V) {
    this[impl].onselect = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onshow", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onshow"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onshow"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onshow);
  },
  set(V) {
    this[impl].onshow = utils.tryImplForWrapper(V);
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onsort", {
  get() {
    return utils.tryWrapperForImpl(this[impl].onsort);
  },
  set(V) {
    this[impl].onsort = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onstalled", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onstalled"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onstalled"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onstalled);
  },
  set(V) {
    this[impl].onstalled = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onsubmit", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onsubmit"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onsubmit"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onsubmit);
  },
  set(V) {
    this[impl].onsubmit = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onsuspend", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onsuspend"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onsuspend"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onsuspend);
  },
  set(V) {
    this[impl].onsuspend = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ontimeupdate", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ontimeupdate"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ontimeupdate"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ontimeupdate);
  },
  set(V) {
    this[impl].ontimeupdate = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "ontoggle", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["ontoggle"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["ontoggle"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].ontoggle);
  },
  set(V) {
    this[impl].ontoggle = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onvolumechange", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onvolumechange"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onvolumechange"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onvolumechange);
  },
  set(V) {
    this[impl].onvolumechange = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

Object.defineProperty(GlobalEventHandlers.prototype, "onwaiting", {
  get() {
<<<<<<< HEAD
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return utils.tryWrapperForImpl(this[impl]["onwaiting"]);
  },

  set(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    V = utils.tryImplForWrapper(V);

    this[impl]["onwaiting"] = V;
  },

=======
    return utils.tryWrapperForImpl(this[impl].onwaiting);
  },
  set(V) {
    this[impl].onwaiting = utils.tryImplForWrapper(V);
  },
>>>>>>> master
  enumerable: true,
  configurable: true
});

<<<<<<< HEAD
Object.defineProperty(GlobalEventHandlers.prototype, Symbol.toStringTag, {
  value: "GlobalEventHandlers",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
=======

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
>>>>>>> master
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
<<<<<<< HEAD
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
=======
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
>>>>>>> master
          return true;
        }
      }
    }
    return false;
  },
<<<<<<< HEAD
  convert(obj, { context = "The provided value" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(`${context} is not of type 'GlobalEventHandlers'.`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(GlobalEventHandlers.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
=======
  create(constructorArgs, privateData) {
    let obj = Object.create(GlobalEventHandlers.prototype);
    this.setup(obj, constructorArgs, privateData);
>>>>>>> master
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(GlobalEventHandlers.prototype);
<<<<<<< HEAD
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: GlobalEventHandlers,
  expose: {}
}; // iface
=======
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: GlobalEventHandlers,
  expose: {
    
  }
};
>>>>>>> master
module.exports = iface;

const Impl = require("../nodes/GlobalEventHandlers-impl.js");
